// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shop.DataAccess.Concrete.EntityFramework;

namespace Shop.WebUI.Migrations
{
    [DbContext(typeof(EFDatabaseContext))]
    [Migration("20200412120622_AdressTable")]
    partial class AdressTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Shop.Entity.Adress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress1");

                    b.Property<string>("Adress2");

                    b.Property<string>("BillingAdress");

                    b.Property<string>("BillingCity");

                    b.Property<string>("BillingCountry");

                    b.Property<string>("BillingPostalCode");

                    b.Property<string>("BillingRegion");

                    b.Property<string>("City");

                    b.Property<int?>("CustomersID");

                    b.Property<string>("PostalCode");

                    b.Property<string>("State");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CustomersID");

                    b.ToTable("Adress");
                });

            modelBuilder.Entity("Shop.Entity.Brand", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName");

                    b.HasKey("ID");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Shop.Entity.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName");

                    b.Property<string>("Picture");

                    b.Property<bool>("PrimaryCategory");

                    b.Property<bool>("SeconderyCategory");

                    b.Property<int>("SubCategory");

                    b.HasKey("ID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Shop.Entity.Customers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardExpMo");

                    b.Property<string>("CardExpYr");

                    b.Property<string>("CreditCard");

                    b.Property<string>("CreditCardTypeID");

                    b.Property<string>("Email");

                    b.Property<bool>("Gender");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<string>("SurName");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Shop.Entity.Images", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageName");

                    b.Property<int>("ProductsID");

                    b.HasKey("ID");

                    b.HasIndex("ProductsID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Shop.Entity.OrderDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BillDate");

                    b.Property<string>("Color");

                    b.Property<double>("Discount");

                    b.Property<decimal>("Freight");

                    b.Property<bool>("Fulfilled");

                    b.Property<decimal>("Money");

                    b.Property<int>("OrderID");

                    b.Property<int?>("OrdersID");

                    b.Property<int>("ProductID");

                    b.Property<int?>("ProductsID");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("SalesTax");

                    b.Property<DateTime>("ShipDate");

                    b.Property<int>("ShipperID");

                    b.Property<string>("Size");

                    b.Property<decimal>("Total");

                    b.HasKey("ID");

                    b.HasIndex("OrdersID");

                    b.HasIndex("ProductsID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Shop.Entity.Orders", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerID");

                    b.Property<int?>("CustomersID");

                    b.Property<bool>("Deleted");

                    b.Property<string>("ErrLoc");

                    b.Property<string>("ErrMsg");

                    b.Property<decimal>("Freight");

                    b.Property<bool>("Fulfilled");

                    b.Property<DateTime>("OrderDate");

                    b.Property<int>("OrderNumber");

                    b.Property<decimal>("Paid");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<int>("PaymentID");

                    b.Property<DateTime>("RequiredDate");

                    b.Property<decimal>("SalesTax");

                    b.Property<DateTime>("ShipDate");

                    b.Property<int>("ShipperID");

                    b.Property<int?>("ShippersID");

                    b.Property<string>("TransactStatus");

                    b.HasKey("ID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("ShippersID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Shop.Entity.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Allowed");

                    b.Property<int?>("OrdersID");

                    b.Property<string>("PaymentType");

                    b.HasKey("ID");

                    b.HasIndex("OrdersID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Shop.Entity.ProductCategory", b =>
                {
                    b.Property<int>("ProductsID");

                    b.Property<int>("CategoryID");

                    b.Property<int>("BrandID");

                    b.HasKey("ProductsID", "CategoryID", "BrandID");

                    b.HasIndex("BrandID");

                    b.HasIndex("CategoryID");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("Shop.Entity.ProductInformation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductsID");

                    b.Property<string>("Title");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.HasIndex("ProductsID");

                    b.ToTable("ProductInformations");
                });

            modelBuilder.Entity("Shop.Entity.Products", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvailableColors");

                    b.Property<string>("AvailableSize");

                    b.Property<int>("CategoryID");

                    b.Property<bool>("CurrentOrder");

                    b.Property<decimal>("Discount");

                    b.Property<bool>("DiscountAvailable");

                    b.Property<decimal>("MSRP");

                    b.Property<string>("Note");

                    b.Property<string>("Picture");

                    b.Property<bool>("ProductAvailable");

                    b.Property<string>("ProductDescription");

                    b.Property<string>("ProductName");

                    b.Property<int>("QuantityPerUnit");

                    b.Property<int>("Ranking");

                    b.Property<string>("SKU");

                    b.Property<string>("StockCode");

                    b.Property<int>("SupplierID");

                    b.Property<string>("SupplierProductID");

                    b.Property<int?>("SuppliersID");

                    b.Property<decimal>("UnitPrice");

                    b.Property<string>("UnitSize");

                    b.Property<double>("UnitWeight");

                    b.Property<int>("UnitsInStock");

                    b.Property<int>("UnitsOnOrder");

                    b.HasKey("ID");

                    b.HasIndex("SuppliersID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Shop.Entity.Shippers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName");

                    b.Property<string>("Phone");

                    b.HasKey("ID");

                    b.ToTable("Shippers");
                });

            modelBuilder.Entity("Shop.Entity.Suppliers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<string>("CompanyName");

                    b.Property<string>("ContactFName");

                    b.Property<string>("ContactLName");

                    b.Property<string>("ContactTitle");

                    b.Property<bool>("CurrentOrder");

                    b.Property<bool>("DiscountAvailable");

                    b.Property<string>("DiscountType");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<string>("Logo");

                    b.Property<string>("Note");

                    b.Property<string>("PaymentMethods");

                    b.Property<string>("Phone");

                    b.Property<string>("PostalCode");

                    b.Property<int>("Ranking");

                    b.Property<string>("State");

                    b.Property<string>("TypeGoods");

                    b.Property<string>("WebSite");

                    b.HasKey("ID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Shop.Entity.Adress", b =>
                {
                    b.HasOne("Shop.Entity.Customers", "Customers")
                        .WithMany("Adress")
                        .HasForeignKey("CustomersID");
                });

            modelBuilder.Entity("Shop.Entity.Images", b =>
                {
                    b.HasOne("Shop.Entity.Products", "Products")
                        .WithMany("Images")
                        .HasForeignKey("ProductsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shop.Entity.OrderDetails", b =>
                {
                    b.HasOne("Shop.Entity.Orders", "Orders")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrdersID");

                    b.HasOne("Shop.Entity.Products", "Products")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductsID");
                });

            modelBuilder.Entity("Shop.Entity.Orders", b =>
                {
                    b.HasOne("Shop.Entity.Customers", "Customers")
                        .WithMany("Orders")
                        .HasForeignKey("CustomersID");

                    b.HasOne("Shop.Entity.Shippers", "Shippers")
                        .WithMany()
                        .HasForeignKey("ShippersID");
                });

            modelBuilder.Entity("Shop.Entity.Payment", b =>
                {
                    b.HasOne("Shop.Entity.Orders")
                        .WithMany("Payment")
                        .HasForeignKey("OrdersID");
                });

            modelBuilder.Entity("Shop.Entity.ProductCategory", b =>
                {
                    b.HasOne("Shop.Entity.Brand", "Brand")
                        .WithMany("productCategories")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shop.Entity.Category", "Category")
                        .WithMany("productCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shop.Entity.Products", "Products")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shop.Entity.ProductInformation", b =>
                {
                    b.HasOne("Shop.Entity.Products", "Products")
                        .WithMany("ProductInformations")
                        .HasForeignKey("ProductsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shop.Entity.Products", b =>
                {
                    b.HasOne("Shop.Entity.Suppliers", "Suppliers")
                        .WithMany("Products")
                        .HasForeignKey("SuppliersID");
                });
#pragma warning restore 612, 618
        }
    }
}
